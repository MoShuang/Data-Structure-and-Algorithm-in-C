/*图是数据结构与算法知识的集大成者，其代码主要分为两部分：
1. 存储结构的实现以及操作集函数定义
    1.1 存储结构
        1.1.1 邻接矩阵
        1.1.2 邻接表
        1.1.3 十字链表
        1.1.4 邻接多重表
2. 算法
    2.1 查找算法
        2.1.1 深度优先搜索
        2.1.2 广度优先搜索
    2.2 最短路径算法
        2.2.1 单源点
            2.2.1.1 单源点无权图
            2.2.1.2 单源点有权图-Dijkstra算法
        2.2.2 多源点
            2.2.2.1 Floyd算法
    2.3 最小生成树算法
*/
        
//2.1.1 DFS深度优先算法
//1. 基本思想：基于递归的特性，递归地访问某顶点的邻接点，当已无未访问邻接点再退回；
//2. 思路及代码实现    
void DFSTraverse(Graph G){
    //初始化辅助矩阵记录已访问邻接点
    bool visited[G.vexnum];
    for(int i=0; i<G.vexnum; i++)
        visited[i] = false;
    for(int v=0; v<G.vexnum; v++)//出于未连通图的考虑，依次遍历每一个顶点
        if(!visited[v])//当某顶点已经访问就不必再访问了
           DAG(G， V);//传递的参数应当是图及某一顶点
            
}
void DFS(Graph G, int V){//存储结构采用邻接表
    visit(V);
    visited[V] = true;
    for(int w=FirstNeighbor(G, V); w>=0; w=NextNeighbor(G, V))//假装已经定义了图的操作集
        if(visited[w]  = false) //退出条件
            DFS(G, w);//递归体        
}

//2.2.1.1单源点无权图的最短路径计算
//1. 基本思想：基于BFS算法，加入辅助矩阵dist记录最短路径值，辅助矩阵path记录路径要经过的顶点
//2. 具体思路及代码实现
void UnWeighted(Vertex S){
    Enqueue(S, Q);//源点入队
    //对于S未访问的邻接点，将其入队并更新矩阵值
    for(S的邻接点w){
        if(dist[w] == -1){//若该顶点未被访问过
            dist[w] = dist[S] + 1;//更新该邻接点的距离矩阵为来源点+1
            path[w] = w;//更新路径矩阵为w
    }
            
    }
}

//2.2.1.2 单源点有权图最短路径计算-Dijkstra算法
/*1. 基本思想：基于贪心算法，借助集合S记录已确定s到某顶点最短路径，数组dist记录源点s到某一顶点的路径权重并不断更新
*/
//2. 具体思路及代码实现
void Dijkstra(Vertex s){
    while(1){
        V = S 中的dist最小者;
        if(这样的点V不存在)
            break;
        collected[V] = true;
        for(V 的邻接点 W){
            if(collected[W]  == false){
                if(dist[W] > dist[V] + E<V, W>){//当发现权值更小的路径则更新
                    dist[W] = dist[V] + E<V, W>;
                    path[W] = V; 
                }
            }
        }
    }
}//对于负值圈无效

//2.2.2.1 多源路最短路径算法
//1. 基本思想：维持代价矩阵，以最初权重为基础，递推添加节点，若发现更短路径则更新
//2. 具体步骤及代码实现
void Floyd(Graph G, int n){
    //初始化代价矩阵D和路径矩阵path
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++){
            D[i][j] = G[i][j];//假定图的储存结构为矩阵,记录i到j的代价
            path[i][j] = -1;//i到j路径中的顶点
        }
    for(k)
        for(i)
            for(j)
                //核心代码：当发现较短路径则更新否则不更新
                if(D[i][j] > D[i][k] + D[k][j]){//注意将新顶点k加入的方式，和矩阵乘法对偶
                    D[i][j] = D[i][k] + D[k][j];
                    path[i][j] = k;//表明i到j的直接路径不及经过k节点代价小;
                    //且要打印i到j的最短路径，先答应i到k的路径，再打印k到j的路径
                }
}
